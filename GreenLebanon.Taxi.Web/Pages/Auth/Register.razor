@page "/register"
@inject IAccountManagement AccountManagement 
@inject NavigationManager Navigation

    <div class="col-12 col-md-5 col-lg-4 align-items-center ">
        <div class="card card-shadow border-0 rounded-3 bg-green-gradient col-10 m-4 ">
            <div class="card-body p-4">
                <div class="row g-6">
                    <div class="col-12">
                        <div class="text-center">
                            <h3 class="fw-bold fs-5 mb-2 text-white"> Sign In</h3>
                            <p class="text-white-50"> Login Into GreenTaxi WebAPP</p>
                        </div>
                    </div>
                </div>
                <EditForm Model="Model" OnValidSubmit="Submit">
                    <DataAnnotationsValidator />
                <div class="form-floating mb-4"> 
                    <InputText @bind-Value="Model.Email" type="email" class="form-control rounded-2 border-0" id="email" placeholder=""/>
                    <label for="email"> Email</label>
                    <ValidationMessage For="() => Model.Email" />
                </div>
                <div class="form-floating mb-4">
                    <InputText @bind-Value="Model.Password" type="password" class="form-control rounded-2 border-0" id="password" placeholder="" />
                    <label for="password"> Password</label>
                    <ValidationMessage For="() => Model.Password" />
                </div>
                <div class="form-floating mb-4">
                    <InputText @bind-Value="Model.ConfirmPassword" type="password" class="form-control rounded-2 border-0" id="confirm-password" placeholder="" />
                    <label for="confirm-password"> Password Confirmation</label>
                    <ValidationMessage For="() => Model.ConfirmPassword" />
                </div>
                <div class="col-12 @(_errorList.Any() ? string.Empty : "d-none")"> 
                <div class="alert alert-warning">
                    @foreach (var error in _errorList ) {
                        <span> @error</span>
                    }
                    </div>
                </div>
                <button type="submit" class="btn btn-outline-light btn-block btn-lg fs-6 fw-bolder py-3 w-100">Sign In</button>
                </EditForm>
            </div>
            <div class="text-center  mt-4"> 
                <p class="text-white "> You Have An Account 
                <NavLink href="login" style="color:greenyellow">Log In </NavLink>    
                </p>
            </div>
        </div>
    </div>
@code {
    [SupplyParameterFromForm]
    private RegisterModel? Model { get; set; }
    private string[] _errorList = [];
    protected override void OnInitialized() => Model ??= new();
    private async Task Submit() {
        //Sumbit Form logic
        //var result = await AccountManagement.RegisterAsync(Model.Email, Model.Password);
        // if ( result.Succeeded ) {
        //     Navigation.NavigateTo("login");
        // }
        // else {
        //     _errorList = result.ErrorList;
        // }
    }

}
<style>
    .validation-message{
        color: yellow;
    }

    .invalid{
       outline: 3px solid yellow;
    }
    .bg-green-gradient{
        background-image: linear-gradient(180deg, #00760a 0%, #003323 90%);
    }
    </style>
