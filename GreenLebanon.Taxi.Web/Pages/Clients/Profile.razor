@page "/profile"
@using GreenLebanon.Taxi.Web.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IClientGateway  ClientGateway
@inject NavigationManager Navigation
<div class="container mt-3 vh-75">
    <div class="card shadow-lg">
        <div class="card-header bg-special text-center text-white d-flex justify-content-between align-items-center">
            <h4 class="mb-0">Profile</h4>
            <button class="btn btn-danger btn-sm" @onclick="Logout">Log Out</button>
        </div>
        <div class="card-body">
            @if ( Model == null ) {
                <div class="text-center">
                    <div class="spinner-border text-success" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else {
                <dl class="row mb-4">
                    <dt class="col-sm-3">First Name:</dt>
                    <dd class="col-sm-9">@Model.FirstName</dd>

                    <dt class="col-sm-3">Last Name:</dt>
                    <dd class="col-sm-9">@Model.LastName</dd>

                    <dt class="col-sm-3">Phone Number:</dt>
                    <dd class="col-sm-9">@Model.PhoneNumber</dd>

                    <dt class="col-sm-3">Address:</dt>
                    <dd class="col-sm-9">@Model.Address</dd>
                </dl>
                <div class="text-center">
                    <button class="btn btn-warning me-2" @onclick="ViewHistory">View History</button>
                    <button class="btn btn-danger" @onclick="DeleteAccount">Delete Account</button>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .container {
        max-width: 600px;
    }

    .card {
        border-radius: 10px;
        overflow: hidden;
    }

    dt {
        font-weight: bold;
    }
</style>

@code{
    private AddClientRequest Model;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            var clientId = authState.User.Claims.FirstOrDefault(x => x.Type == "sub")?.Value;

            Model = await ClientGateway.GetClientAsync(clientId);
        }
        catch ( Exception ex )
        {
            //_errorMessage = ex.Message;
        }
    }
    private void Logout() {
        // Logic to log out the user
    }

    private void ViewHistory() {
        Navigation.NavigateTo("client-history");
    }

    private void DeleteAccount() {
        // Logic to delete the user account
    }

    public class UserProfile {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string PhoneNumber { get; set; }
        public string Address { get; set; }
    }
}

